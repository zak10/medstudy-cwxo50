apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-deployment
  labels:
    app: medical-research-platform
    component: api
    tier: backend
    environment: production
spec:
  # Horizontal scaling with 3 replicas for high availability
  replicas: 3
  
  # Zero-downtime rolling update strategy
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
      
  # Selector for pod management
  selector:
    matchLabels:
      app: medical-research-platform
      component: api
      
  template:
    metadata:
      labels:
        app: medical-research-platform
        component: api
        tier: backend
      annotations:
        # Prometheus monitoring configuration
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
        
    spec:
      # Pod anti-affinity for high availability
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: component
                  operator: In
                  values:
                  - api
              topologyKey: kubernetes.io/hostname
              
      # Security context for pod-level security
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
        readOnlyRootFilesystem: true
        
      containers:
      - name: api
        image: medical-research-platform/api:latest
        imagePullPolicy: Always
        
        # Container port configuration
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
          
        # Resource requests and limits
        resources:
          requests:
            cpu: "500m"
            memory: "512Mi"
          limits:
            cpu: "1000m"
            memory: "1Gi"
            
        # Liveness probe for container health
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3
          
        # Readiness probe for service availability
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
          
        # Startup probe for initialization
        startupProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
          failureThreshold: 30
          
        # Environment configuration
        env:
        - name: DJANGO_SETTINGS_MODULE
          value: "config.settings.production"
        - name: DJANGO_DEBUG
          value: "false"
        - name: DJANGO_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: api-secrets
              key: django-secret-key
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: api-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: api-secrets
              key: redis-url
              
        # Volume mounts
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: media
          mountPath: /app/media
        - name: static
          mountPath: /app/static
          readOnly: true
          
      # Volume definitions
      volumes:
      - name: tmp
        emptyDir: {}
      - name: media
        persistentVolumeClaim:
          claimName: api-media-pvc
      - name: static
        persistentVolumeClaim:
          claimName: api-static-pvc